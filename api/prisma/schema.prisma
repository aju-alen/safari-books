// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User{
  id String @id @default(cuid())
  name String
  email String @unique
  password String
  role Role 
  emailVerificationToken String?
  emailVerified Boolean @default(false)
  firstTimeLogin Boolean @default(true)
  pushToken String? // Store push notification token
  
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

   // Define the one-to-many relationship
  companies             Company[] // A user can have many companies
  authors               Author[] // A user can have many authors
  Library               Library[]
  bookmarks             Bookmark[] // A user can have many bookmarks
  likes                 Like[] // A user can have many likes
  books                 Book[] // A user can have many books

}

enum Role{
  LISTENER
  NARRATOR
  PUBLISHER
}

enum Status{
  NOT_STARTED
  IN_PROGRESS
  FINISHED
}

model Library{
  id String @id @default(cuid())
  userId String
  bookId String
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  status Status @default(NOT_STARTED)
  timestamp Int @default(0) // Track listening position in seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book{

  id                String   @id @default(cuid())
  title             String  // delete this
  description       String  // delete this
  durationInHours   Int
  durationInMinutes Int
  coverImage        String  // delete this
  authorName        String  // delete this
  narratorName      String  // delete this
  summary           String   @db.LongText
  releaseDate       DateTime 
  language          String
  publisher         String
  rating            Int @default(0) // default rating is 0
  categories        Categories
  colorCode         String?
  sampleAudioURL    String?  // delete this
  completeAudioUrl  String?
  isPublished       Boolean @default(false) 
  amount            Int @default(0) // default amount is 0

  // Add either a company or author as the creator
  companyId         String? 
  authorId          String?
  featuredBook      Boolean @default(false)
  createdAt         DateTime @default(now()) 
  updatedAt         DateTime @updatedAt @default(now())
  publishedAt       DateTime? @default(now())

  company           Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  author            Author?  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Library           Library[]
  bookmarks         Bookmark[] // A book can have many bookmarks
  likes             Like[] // A book can have many likes
  user              User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String?
}

enum Categories{
  biographiesmemoirs
  fiction
  nonfiction
  biography
  selfhelp
  history
  fantasy
  science
  romance
  thriller
  mystery
  poetry
  children
  youngadult
  health
  religion
  business
  education
  travel
}
model Company{
id String @id 
companyName String
address String
telephone String
companyRegNo String
kraPin String
companyRegNoPdfUrl String
kraPinPdfUrl String
isVerified Boolean @default(false)

// Add a foreign key to reference the user
  userId                String   

  // Define the relationship with the User model
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)


title String?
language String?
categories Categories?
date DateTime?
ISBNDOIISRC String?
synopsis String? @db.LongText
narrator String?
narrationStyleSlow Boolean?
narrationStyleFast Boolean?
narrationStyleIntimate Boolean?
narrationStyleCasual Boolean?
narrationStyleStatic Boolean?
narrationStyleOratoric Boolean?
audioSampleURL String?
pdfURL String?
rightsHolder Boolean?
coverImage String?
amount Int @default(0) // default amount is 0
books               Book[]
}

model Author{
id String @id
fullName String
address String
telephone String
idppNo String
idppPdfUrl String
kraPin String
kraPinPdfUrl String
writersGuildNo String?
amount Int  @default(0) // default amount is 0
isVerified Boolean @default(false)

  // Add a foreign key to reference the user
userId                String   

  // Define the relationship with the User model
user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

title String?
language String?
categories Categories?
date DateTime?
ISBNDOIISRC String?
synopsis String? @db.LongText
narrator String?
narrationStyleSlow Boolean?
narrationStyleFast Boolean?
narrationStyleIntimate Boolean?
narrationStyleCasual Boolean?
narrationStyleStatic Boolean?
narrationStyleOratoric Boolean?
audioSampleURL String?
pdfURL String?
rightsHolder Boolean?
coverImage String?
books               Book[]

}

model Admin {
id String @id @default(cuid())
  name String
  email String @unique
  password String
  role String? 
  emailVerificationToken String?
  emailVerified Boolean @default(false)
  firstTimeLogin Boolean @default(true)
  
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

}

model Bookmark {
  id String @id @default(cuid())
  userId String
  bookId String
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId]) // Prevent duplicate bookmarks
}

model Like {
  id String @id @default(cuid())
  userId String
  bookId String
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId]) // Prevent duplicate likes
}